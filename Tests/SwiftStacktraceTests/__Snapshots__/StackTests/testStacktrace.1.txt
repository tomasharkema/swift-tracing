- "\t\tat: SwiftStacktrace.Caller.init(fileID: Swift.String, line: Swift.UInt, function: Swift.String, stack: any Swift.Sequence<Self.Swift.Sequence.Element == Swift.String>) -> SwiftStacktrace.Caller\n\t\tat: SwiftStacktrace.StacktraceError.init(Swift.Error, Swift.String, Swift.UInt, Swift.String) -> SwiftStacktrace.StacktraceError\n\t\t\tat: SwiftStacktrace.LazyFrame noFunctionFound SwiftStacktrace/FunctionInfo.swift:58 :: SourceFileSyntax\n├─statements: CodeBlockItemListSyntax\n│ ╰─[0]: CodeBlockItemSyntax\n│   ╰─item: SequenceExprSyntax\n│     ╰─elements: ExprListSyntax\n│       ├─[0]: MemberAccessExprSyntax\n│       │ ├─base: MemberAccessExprSyntax\n│       │ │ ├─base: DeclReferenceExprSyntax\n│       │ │ │ ╰─baseName: identifier(\"PlexApi\")\n│       │ │ ├─period: period\n│       │ │ ╰─declName: DeclReferenceExprSyntax\n│       │ │   ╰─baseName: identifier(\"Requestor\")\n│       │ ├─period: period\n│       │ ╰─declName: DeclReferenceExprSyntax\n│       │   ╰─baseName: identifier(\"request\")\n│       ├─[1]: BinaryOperatorExprSyntax\n│       │ ╰─operator: binaryOperator(\"<\")\n│       ╰─[2]: DeclReferenceExprSyntax\n│         ╰─baseName: identifier(\"A\")\n├─unexpectedBetweenStatementsAndEndOfFileToken: UnexpectedNodesSyntax\n│ ├─[0]: keyword(SwiftSyntax.Keyword.where)\n│ ├─[1]: identifier(\"A\")\n│ ├─[2]: colon\n│ ├─[3]: identifier(\"Swift\")\n│ ├─[4]: period\n│ ├─[5]: identifier(\"Decodable\")\n│ ├─[6]: binaryOperator(\">\")\n│ ├─[7]: leftParen\n│ ├─[8]: identifier(\"url\")\n│ ├─[9]: colon\n│ ├─[10]: identifier(\"Foundation\")\n│ ├─[11]: period\n│ ├─[12]: identifier(\"URL\")\n│ ├─[13]: comma\n│ ├─[14]: wildcard\n│ ├─[15]: colon\n│ ├─[16]: identifier(\"A\")\n│ ├─[17]: period\n│ ├─[18]: identifier(\"Type\")\n│ ├─[19]: comma\n│ ├─[20]: identifier(\"requestUUID\")\n│ ├─[21]: colon\n│ ├─[22]: identifier(\"Swift\")\n│ ├─[23]: period\n│ ├─[24]: identifier(\"Optional\")\n│ ├─[25]: binaryOperator(\"<\")\n│ ├─[26]: identifier(\"Foundation\")\n│ ├─[27]: period\n│ ├─[28]: identifier(\"UUID\")\n│ ├─[29]: postfixOperator(\">\")\n│ ├─[30]: comma\n│ ├─[31]: identifier(\"method\")\n│ ├─[32]: colon\n│ ├─[33]: identifier(\"Swift\")\n│ ├─[34]: period\n│ ├─[35]: identifier(\"String\")\n│ ├─[36]: comma\n│ ├─[37]: identifier(\"queryItems\")\n│ ├─[38]: colon\n│ ├─[39]: identifier(\"Swift\")\n│ ├─[40]: period\n│ ├─[41]: identifier(\"Optional\")\n│ ├─[42]: binaryOperator(\"<\")\n│ ├─[43]: identifier(\"Swift\")\n│ ├─[44]: period\n│ ├─[45]: identifier(\"Array\")\n│ ├─[46]: binaryOperator(\"<\")\n│ ├─[47]: identifier(\"Foundation\")\n│ ├─[48]: period\n│ ├─[49]: identifier(\"URLQueryItem\")\n│ ├─[50]: postfixOperator(\">>\")\n│ ├─[51]: comma\n│ ├─[52]: identifier(\"sendDefaultQueries\")\n│ ├─[53]: colon\n│ ├─[54]: identifier(\"Swift\")\n│ ├─[55]: period\n│ ├─[56]: identifier(\"Bool\")\n│ ├─[57]: comma\n│ ├─[58]: identifier(\"timeout\")\n│ ├─[59]: colon\n│ ├─[60]: identifier(\"Swift\")\n│ ├─[61]: period\n│ ├─[62]: identifier(\"Optional\")\n│ ├─[63]: binaryOperator(\"<\")\n│ ├─[64]: identifier(\"Swift\")\n│ ├─[65]: period\n│ ├─[66]: identifier(\"Duration\")\n│ ├─[67]: postfixOperator(\">\")\n│ ├─[68]: comma\n│ ├─[69]: identifier(\"invalidateAfterError\")\n│ ├─[70]: colon\n│ ├─[71]: identifier(\"Swift\")\n│ ├─[72]: period\n│ ├─[73]: identifier(\"Bool\")\n│ ├─[74]: comma\n│ ├─[75]: identifier(\"useCache\")\n│ ├─[76]: colon\n│ ├─[77]: identifier(\"Swift\")\n│ ├─[78]: period\n│ ├─[79]: identifier(\"Bool\")\n│ ├─[80]: comma\n│ ├─[81]: identifier(\"onlyCached\")\n│ ├─[82]: colon\n│ ├─[83]: identifier(\"Swift\")\n│ ├─[84]: period\n│ ├─[85]: identifier(\"Bool\")\n│ ├─[86]: rightParen\n│ ├─[87]: identifier(\"async\")\n│ ├─[88]: keyword(SwiftSyntax.Keyword.throws)\n│ ├─[89]: arrow\n│ ╰─[90]: identifier(\"A\")\n╰─endOfFileToken: endOfFile\n\t\tat: PlexApi.ResourcesService.ping(server: PlexShared.ServerWithConnection, timeout: Swift.Duration) async -> PlexApi.PingResult\n\t\tat: PlexApi.ResourcesService.capabilities(server: PlexShared.Server) async throws -> PlexShared.Root<PlexShared.Capabilities>\n\t\t\tat: SwiftStacktrace.LazyFrame noFunctionFound SwiftStacktrace/FunctionInfo.swift:58 :: SourceFileSyntax\n├─statements: CodeBlockItemListSyntax\n├─unexpectedBetweenStatementsAndEndOfFileToken: UnexpectedNodesSyntax\n│ ├─[0]: keyword(SwiftSyntax.Keyword.static)\n│ ├─[1]: identifier(\"PlexRunner\")\n│ ├─[2]: period\n│ ├─[3]: identifier(\"Main\")\n│ ├─[4]: period\n│ ├─[5]: identifier(\"main\")\n│ ├─[6]: leftParen\n│ ├─[7]: rightParen\n│ ├─[8]: identifier(\"async\")\n│ ├─[9]: keyword(SwiftSyntax.Keyword.throws)\n│ ├─[10]: arrow\n│ ├─[11]: leftParen\n│ ╰─[12]: rightParen\n╰─endOfFileToken: endOfFile\n\t\t\tat: SwiftStacktrace.LazyFrame noFunctionFound SwiftStacktrace/FunctionInfo.swift:58 :: SourceFileSyntax\n├─statements: CodeBlockItemListSyntax\n├─unexpectedBetweenStatementsAndEndOfFileToken: UnexpectedNodesSyntax\n│ ├─[0]: keyword(SwiftSyntax.Keyword.static)\n│ ├─[1]: identifier(\"PlexRunner\")\n│ ├─[2]: period\n│ ├─[3]: identifier(\"Main\")\n│ ├─[4]: period\n│ ├─[5]: identifier(\"$main\")\n│ ├─[6]: leftParen\n│ ├─[7]: rightParen\n│ ├─[8]: identifier(\"async\")\n│ ├─[9]: keyword(SwiftSyntax.Keyword.throws)\n│ ├─[10]: arrow\n│ ├─[11]: leftParen\n│ ╰─[12]: rightParen\n╰─endOfFileToken: endOfFile\n\t\t\tat: SwiftStacktrace.LazyFrame Error Domain= Code=0 \"(null)\"\n\t\t\tat: SwiftStacktrace.LazyFrame noFunctionFound SwiftStacktrace/FunctionInfo.swift:58 :: SourceFileSyntax\n├─statements: CodeBlockItemListSyntax\n│ ├─[0]: CodeBlockItemSyntax\n│ │ ├─item: DeclReferenceExprSyntax\n│ │ │ ╰─baseName: identifier(\"reabstraction\")\n│ │ ╰─semicolon: semicolon MISSING\n│ ├─[1]: CodeBlockItemSyntax\n│ │ ├─item: DeclReferenceExprSyntax\n│ │ │ ╰─baseName: identifier(\"thunk\")\n│ │ ╰─semicolon: semicolon MISSING\n│ ├─[2]: CodeBlockItemSyntax\n│ │ ├─item: DeclReferenceExprSyntax\n│ │ │ ╰─baseName: identifier(\"helper\")\n│ │ ╰─semicolon: semicolon MISSING\n│ ├─[3]: CodeBlockItemSyntax\n│ │ ├─item: DeclReferenceExprSyntax\n│ │ │ ╰─baseName: identifier(\"from\")\n│ │ ╰─semicolon: semicolon MISSING\n│ ├─[4]: CodeBlockItemSyntax\n│ │ ├─item: TypeExprSyntax\n│ │ │ ╰─type: AttributedTypeSyntax\n│ │ │   ├─attributes: AttributeListSyntax\n│ │ │   │ ├─[0]: AttributeSyntax\n│ │ │   │ │ ├─atSign: atSign\n│ │ │   │ │ ╰─attributeName: IdentifierTypeSyntax\n│ │ │   │ │   ╰─name: identifier(\"escaping\")\n│ │ │   │ ├─[1]: AttributeSyntax\n│ │ │   │ │ ├─atSign: atSign\n│ │ │   │ │ ├─attributeName: IdentifierTypeSyntax\n│ │ │   │ │ │ ╰─name: identifier(\"convention\")\n│ │ │   │ │ ├─leftParen: leftParen\n│ │ │   │ │ ├─arguments: ConventionAttributeArgumentsSyntax\n│ │ │   │ │ │ ╰─conventionLabel: identifier(\"thin\")\n│ │ │   │ │ ╰─rightParen: rightParen\n│ │ │   │ ╰─[2]: AttributeSyntax\n│ │ │   │   ├─atSign: atSign\n│ │ │   │   ╰─attributeName: IdentifierTypeSyntax\n│ │ │   │     ╰─name: identifier(\"async\")\n│ │ │   ╰─baseType: FunctionTypeSyntax\n│ │ │     ├─leftParen: leftParen\n│ │ │     ├─parameters: TupleTypeElementListSyntax\n│ │ │     ├─rightParen: rightParen\n│ │ │     ╰─returnClause: ReturnClauseSyntax\n│ │ │       ├─arrow: arrow\n│ │ │       ╰─type: TupleTypeSyntax\n│ │ │         ├─leftParen: leftParen\n│ │ │         ├─elements: TupleTypeElementListSyntax\n│ │ │         ╰─rightParen: rightParen\n│ │ ╰─semicolon: semicolon MISSING\n│ ╰─[5]: CodeBlockItemSyntax\n│   ╰─item: DeclReferenceExprSyntax\n│     ╰─baseName: identifier(\"to\")\n├─unexpectedBetweenStatementsAndEndOfFileToken: UnexpectedNodesSyntax\n│ ├─[0]: atSign\n│ ├─[1]: identifier(\"escaping\")\n│ ├─[2]: atSign\n│ ├─[3]: identifier(\"callee_guaranteed\")\n│ ├─[4]: atSign\n│ ├─[5]: identifier(\"async\")\n│ ├─[6]: leftParen\n│ ├─[7]: rightParen\n│ ├─[8]: arrow\n│ ├─[9]: leftParen\n│ ├─[10]: atSign\n│ ├─[11]: identifier(\"out\")\n│ ├─[12]: leftParen\n│ ├─[13]: rightParen\n│ ├─[14]: comma\n│ ├─[15]: atSign\n│ ├─[16]: identifier(\"error\")\n│ ├─[17]: atSign\n│ ├─[18]: identifier(\"owned\")\n│ ├─[19]: identifier(\"Swift\")\n│ ├─[20]: period\n│ ├─[21]: identifier(\"Error\")\n│ ╰─[22]: rightParen\n╰─endOfFileToken: endOfFile\n\t\t\tat: SwiftStacktrace.LazyFrame noFunctionFound SwiftStacktrace/FunctionInfo.swift:58 :: SourceFileSyntax\n├─statements: CodeBlockItemListSyntax\n│ ├─[0]: CodeBlockItemSyntax\n│ │ ├─item: DeclReferenceExprSyntax\n│ │ │ ╰─baseName: identifier(\"partial\")\n│ │ ╰─semicolon: semicolon MISSING\n│ ├─[1]: CodeBlockItemSyntax\n│ │ ├─item: DeclReferenceExprSyntax\n│ │ │ ╰─baseName: identifier(\"apply\")\n│ │ ╰─semicolon: semicolon MISSING\n│ ├─[2]: CodeBlockItemSyntax\n│ │ ├─item: DeclReferenceExprSyntax\n│ │ │ ╰─baseName: identifier(\"forwarder\")\n│ │ ╰─semicolon: semicolon MISSING\n│ ╰─[3]: CodeBlockItemSyntax\n│   ╰─item: ForStmtSyntax\n│     ├─forKeyword: keyword(SwiftSyntax.Keyword.for)\n│     ├─pattern: IdentifierPatternSyntax\n│     │ ╰─identifier: identifier(\"reabstraction\")\n│     ├─inKeyword: keyword(SwiftSyntax.Keyword.in) MISSING\n│     ├─sequence: DeclReferenceExprSyntax\n│     │ ╰─baseName: identifier(\"thunk\")\n│     ╰─body: CodeBlockSyntax\n│       ├─leftBrace: leftBrace MISSING\n│       ├─statements: CodeBlockItemListSyntax\n│       │ ├─[0]: CodeBlockItemSyntax\n│       │ │ ├─item: DeclReferenceExprSyntax\n│       │ │ │ ╰─baseName: identifier(\"helper\")\n│       │ │ ╰─semicolon: semicolon MISSING\n│       │ ├─[1]: CodeBlockItemSyntax\n│       │ │ ├─item: DeclReferenceExprSyntax\n│       │ │ │ ╰─baseName: identifier(\"from\")\n│       │ │ ╰─semicolon: semicolon MISSING\n│       │ ├─[2]: CodeBlockItemSyntax\n│       │ │ ├─item: TypeExprSyntax\n│       │ │ │ ╰─type: AttributedTypeSyntax\n│       │ │ │   ├─attributes: AttributeListSyntax\n│       │ │ │   │ ├─[0]: AttributeSyntax\n│       │ │ │   │ │ ├─atSign: atSign\n│       │ │ │   │ │ ╰─attributeName: IdentifierTypeSyntax\n│       │ │ │   │ │   ╰─name: identifier(\"escaping\")\n│       │ │ │   │ ├─[1]: AttributeSyntax\n│       │ │ │   │ │ ├─atSign: atSign\n│       │ │ │   │ │ ├─attributeName: IdentifierTypeSyntax\n│       │ │ │   │ │ │ ╰─name: identifier(\"convention\")\n│       │ │ │   │ │ ├─leftParen: leftParen\n│       │ │ │   │ │ ├─arguments: ConventionAttributeArgumentsSyntax\n│       │ │ │   │ │ │ ╰─conventionLabel: identifier(\"thin\")\n│       │ │ │   │ │ ╰─rightParen: rightParen\n│       │ │ │   │ ╰─[2]: AttributeSyntax\n│       │ │ │   │   ├─atSign: atSign\n│       │ │ │   │   ╰─attributeName: IdentifierTypeSyntax\n│       │ │ │   │     ╰─name: identifier(\"async\")\n│       │ │ │   ╰─baseType: FunctionTypeSyntax\n│       │ │ │     ├─leftParen: leftParen\n│       │ │ │     ├─parameters: TupleTypeElementListSyntax\n│       │ │ │     ├─rightParen: rightParen\n│       │ │ │     ╰─returnClause: ReturnClauseSyntax\n│       │ │ │       ├─arrow: arrow\n│       │ │ │       ╰─type: TupleTypeSyntax\n│       │ │ │         ├─leftParen: leftParen\n│       │ │ │         ├─elements: TupleTypeElementListSyntax\n│       │ │ │         ╰─rightParen: rightParen\n│       │ │ ╰─semicolon: semicolon MISSING\n│       │ ╰─[3]: CodeBlockItemSyntax\n│       │   ╰─item: DeclReferenceExprSyntax\n│       │     ╰─baseName: identifier(\"to\")\n│       ╰─rightBrace: rightBrace MISSING\n├─unexpectedBetweenStatementsAndEndOfFileToken: UnexpectedNodesSyntax\n│ ├─[0]: atSign\n│ ├─[1]: identifier(\"escaping\")\n│ ├─[2]: atSign\n│ ├─[3]: identifier(\"callee_guaranteed\")\n│ ├─[4]: atSign\n│ ├─[5]: identifier(\"async\")\n│ ├─[6]: leftParen\n│ ├─[7]: rightParen\n│ ├─[8]: arrow\n│ ├─[9]: leftParen\n│ ├─[10]: atSign\n│ ├─[11]: identifier(\"out\")\n│ ├─[12]: leftParen\n│ ├─[13]: rightParen\n│ ├─[14]: comma\n│ ├─[15]: atSign\n│ ├─[16]: identifier(\"error\")\n│ ├─[17]: atSign\n│ ├─[18]: identifier(\"owned\")\n│ ├─[19]: identifier(\"Swift\")\n│ ├─[20]: period\n│ ├─[21]: identifier(\"Error\")\n│ ╰─[22]: rightParen\n╰─endOfFileToken: endOfFile\n\t\t\tat: SwiftStacktrace.LazyFrame Error Domain= Code=0 \"(null)\""
